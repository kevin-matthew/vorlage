#ifndef VORLAGE_PROCESSORS_H_
#define VORLAGE_PROCESSORS_H_ 1
#include <stdint.h>
#include <stdio.h>
#include "vorlage.h"

const uint32_t vorlage_proc_interfaceversion = 0x1;

/*
 * todo: note to self: before I delete these, transferthe documentation.
 * All structs that handle the input request scheme (proto) and handle
 * the actual input.
 *
 * Input (vorlage_proc_input, vorlage_proc_streaminput) are structs that hold
 * what the user had inputed. Input is simply an array of input that
 * is associtative to the proto type that was supplied.
 *
 * Input prototypes (vorlage_proc_inputproto) are simply an array of input
 * name, and input description.
 *
 */
typedef struct {
	const char *name;
	const char *description;
} vorlage_proc_inputproto;
typedef struct {
	// back-reference pointer
	vorlage_proc_inputproto *proto;

	// array of nullterm strings. len found in proto.input.c and reflects
	// that of proto.name
	const char *input;
} vorlage_proc_input;

/*
 * The vorlage_proc_variable struct is used to by the processor to
 * tell vorlage what variable it has availabe. It's also used in
 * vorlage_proc_defineinfo as a pointer so that the processor can see
 * the exact reference of what variable needs to be defined.
 */
typedef struct {
	// the processor-variable name of the variable
	const char *name;

	// Describe what this processor does and why someone would need
	// it.
	const char *description;

	// Specify what input field names this variable needs during the
	// output phase (can be nil)
	int                            inputprotoc;
	const vorlage_proc_inputproto *inputprotov;
	int                            streaminputprotoc;
	const vorlage_proc_inputproto *streaminputprotov;
} vorlage_proc_variable;


/*
 * rid is a globally unique request id that is generated by vorlage.
 */
typedef uint64_t rid;

/*
 * vorlage_proc_info is given to vorlage the instant a processor is loaded.
 */
typedef struct {
	// Describe what this processor does and why someone would need
	// it.
	const char *description;

	// Specify what input field names this processor needs during the
	// request phase
	int                            inputprotoc;
	const vorlage_proc_inputproto *inputprotov;
	int                            streaminputprotoc;
	const vorlage_proc_inputproto *streaminputprotov;

	// an array of variables that this processor provides to
	// documents.
	const vorlage_proc_variable *variablesv;
	int                          variablesc;
} vorlage_proc_info;

// returns -2 on EOF.
// returns -3 on when the stream was not provided by the user.
int vorlage_stream_read (void *streamptr, char *buf, int size);
//int    vorlage_stream_seek (void *streamptr, off_t offset, int whence);
//int    vorlage_stream_close(void *streamptr);

typedef struct {
// when read() and close() are called. The "cookie" argument will be set to
// usecookie.
void *usecookie;

} vorlage_cstream;

/*
 * vorlage_proc_requestinfo is provided to processors
 */
typedef struct {
	// procinfo is a pointer to the procinfo that was returned by the
	// processor's vorlage_startup function.
	const vorlage_proc_info procinfo;

	// nullterm string of the filepath that's being requested.
	const char *filepath;

	// the input that reflects the scheme provided by
	// procinfo.inputproto. hense why no counts are provided.
	const char **inputv;
	// an array of pointers to be used in vorlage_stream_... functions
	void **streaminputv;

	// request id
	rid rid;

} vorlage_proc_requestinfo;

/*
 * vorlage_proc_action (and its array wrapper vorlage_proc_actions)
 * is a struct to which can specify actions to perform before the
 * request is even executed.
 * The list of actions can be found in vorlage_proc_actionenum along
 * with the each action's documentation.
 */
enum vorlage_proc_actionenum {

	// The processor has hit a critical error that is it's own fault.
	// This action will stop the request. vorlage_proc_action.data can
	// be set to a NON-null-terminated string that will be shown to the
	// user.
	// This action will stop the request.
	VORLAGE_PROC_ACTION_CRITICAL = 0x1,

	// The processor recongizes that the request is a violation of the
	// access granted to the user. vorlage_proc_action.data can be
	// set to a NON-null-term string that will be shown to the user.
	// This action will stop the request.
	VORLAGE_PROC_ACTION_ACCESSFAIL = 0xd ,

	// The processor request that the user see another
	// file. vorlage_proc_action.data must be set to a file path to
	// which the user will be directed to (NON-null-term)
	// This action will stop the request.
	VORLAGE_PROC_ACTION_SEE = 0xb,


	/**** HTTP only ****/

	// The processor will set a header to the HTTP request
	// browser. vorlage_proc_action.data must be a NON-null-term string of
	// the header
	VORLAGE_PROC_ACTION_HTTPHEADER = 0x47790002,
};
// action struct (see above enum)
typedef struct {
	// action is an int/enum that is equal to any item found in the
	// aciton list (see enum vorlage_proc_actionenum)
	enum vorlage_proc_actionenum action;

	// data is arbitrary data that is context-specific to whatever
	// action was set. So see the aformentioned action list.
	const void *data;
	// length bytes found in data
	int datac;
} vorlage_proc_action;
// action array struct (see above struct)
typedef struct {
	const vorlage_proc_action *actionv;
	int                        actionc;
} vorlage_proc_actions;


/*
 * vorlage_proc_defineinfo is a struct that holds all the information
 * needed to provide a processor sufficent data to define a variable.
 */
typedef struct {
	// the request info
	const vorlage_proc_requestinfo *requestinfo;

	// the variable which needs to be defined. it is the index that can be used
	// in requestinfo.procinfo.variablesv[procvarindex]
	const int procvarindex;
	// array of streams associated with the streaminputprotov.
	// when calling these functions, "cookie" should be left null.
	const char **inputv;
	// an array of pointers to be used in vorlage_stream_... functions
	void **streaminputv;
} vorlage_proc_defineinfo;


#endif /* VORLAGE_PROCESSORS_H_ */
