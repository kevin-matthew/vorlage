#+AUTHOR: kmarschke
#+DATE: 2020-02-15

Current issue: well there's 2. First off, when it comes to seeing who
calls what, my first instinct was to force the processor to implement
(and export) certain function symbols. However, this is uncommon
practice, and I'm starting to figure out why. I should allow the
Processor files import a doccom 'header' file and be linked to a
doccomp shared object. So when doccomp is executed, it loads that same
shared object and calls the functions needed to get all the Processors
as well as acess them.

All of this in the context of "C" isn't a bad idae, howeer this is Go
we're talking about and will prove to be somewhat troublesome.

However this technique would be more practicle.... and would only
developers to be handed a "doccomp.h" as well as a "doccomp.go" for
them to implmenet. Instructions would need be provided. The
"doccomp.go" would need further research.

Finally, if we allow them to import header ifles, and call functions
on their own behalf... we can later add more functionaility without
breaking backwards compatability such as fcgi variables and caching.

Going forward I should ignore the possibile use of "C" as that all
seems to be figured out when we get done with the go-side of
implemntation.

* Introduction

** Abstract
Making a website? Use document compiler.

Document compiler puts together text documnets by looking for specific
macros within the text documents themselves (such as .html, .txt, .js,
ect). Once compiled, the completed document is cached and can be
served over a variety of channels (http, fcgi, cli, ect)

** Purpose
Here it is. Ellem has been working with HTTP/HTML for litterally
decades and we have never loved doing it until now. 

We've seen everything; php, node, react, webassembly, apache, nginx,
coldfusion, dart, typescript, asp.net, drupal, squarespace,
wordpress. Why have all these products and technologies been made?
What problem is so big that there needs to have an endless amount of
solutions to support it? The problem is simple:

*HTTP sucks*.

The entire planet has adopted a standard that was never in a million
years supposed to be as widley used as it is now. HTML was made in a
weekend by 1 man who had no advanced knowlege in computer
engineering. HTTP was made by a small team trying to solve a problem
they had between a team of 50 people. Javascript was made in 2 weeks
and is named after another language to trick people in to using it.

But now: Every photon of light transfered accrossed the fibre optic
internet backbone in an attempt to deliever an HTML can be measured in
actual pounds. This is a huge problem.

* Goals
What you can do with document compiler should be directly proportional
with your technical skill set in software development.

** Interpreting Procedures
  - org-mode
  - haml
  - sass
  - markdown
** Arbitrary code interfaces
  - Go
  - python
  - javascript
  - PHP 


* Document Example
#+BEGIN_SRC
#include 
#define $myvar my var will be replaced with this sentence.
#+END_SRC
* Technical Aspects
** Highlevel Proccess
step 1: we get a request for a file
step 2: is the file cached? if yes then go to step 7
step 3: run all the "#include"
step 4: run all the "#define"
step 5: fill in all the variables ($asdf)
step 6: save the outputted file to the chache
step 7: run the 'preprocess' event
step 8: run the "proccess function" with a paremters of filename, and http info
step 9: run the "postproccess" hook with a paremters of filename, and http info
step 10: return a readercloser that a service can use to serve the page
step 11: if there's any undefined variables, report an error.

my only problem is this makes it hard, every file will have its
personal execution, bvut all the exectuion is going to be in one place
( see step 8b). Also, you should be able to define variables along
with what they're cached too (such as a session)

* Using Macros
 - A macro must start with the macro prefix '#'
 - The macro prefix must be preceeded by an end-of-line '\n' or
   begining of file.
 - The macro itself can either be =prepend=, =append= or =define=
 - The macro's argument must be preceded by a space. The argument
   is trimmed for whitespace before it is used.
 - The macro ends when another end-of-line is detected '\n' or end of file
 - The number of bytes between the macro prefix '#' and the
   end-of-line '\n' cannot exceed 1024 (MacroMaxLength).
 - When a macro is ran, the newline '\n' before and after it (if
   present) are removed.
 - 
** ~#prepend~, ~#append~
Includes another file, the included file may also have macros.
 - If a circular dependcy is detected, the document will not compile.


** ~#define~
The define takes 2 arguments, a variable name and a value.

** Example

#+BEING_SRC text
#prepend header.html
#append footer.html
#append morefooter.org
#define title ASDF


This is the main document
#+END_SRC

* Variables
  - all variables must be prefixed with '$'
  - all variables must be alphanumaric, all lowercase
  - a precense of a dot '.' will set the variable as a processor
    variable.
  - if a variable is never defined an error will occour.
  - the maximum length of a variable name will be 32 (including the
    '$' prefix)
** Normal variables ~$myvar~
To define a normal variable, you must do so in a static document using
a define macro as so: ~#define $myvar~. For example

#+BEING_SRC
#define $myname Kevin
Hello my name is $myname.

Best regards,
  -$myname
#+END_SRC
Will compile to:
#+BEGIN_SRC
Hello my name is Kevin.

Best regards,
  -Kevin
#+END_SRC
** Processor variables ~$myproccessor.myvar~
  - if undefined (by processor), an error will occour
